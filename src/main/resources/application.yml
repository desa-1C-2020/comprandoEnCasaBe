spring:
  application.name: comprandoencasa
  datasource:
    url: ${JDBC_DATABASE_URL}
    username: ${DATASOURCE_HEROKU_USERNAME}
    password: ${DATASOURCE_HEROKU_PASSWORD}
  jpa:
    properties.hibernate.jdbc.lob.non_contextual_creation: true
    hibernate:
      ddl-auto: update
  h2:
    console:
      enabled: true
      path: /h2-console
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
            - email
            - profile
  #        provider:
  #            google: No hace falta porque lo crea por defecto
  #            authorizationUri:
  #            tokenUri: ${OAUTH2_JWT_URI}
  #            userInfoUri:


google.api.key: ${GOOGLE_API_KEY}

app:
  auth:
    tokenSecret: ${TOKEN_SECRET}
    tokenExpirationMsec: ${TOKEN_EXPIRATION_M_SEC}
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris: ${OAUTH2_AUTHORIZED_REDIRECT_URIS}

logging:
  pattern.console: "%-23d{ISO8601} %clr(%-5p) %clr(%mdc{instanceId}){yellow} %clr([%-22t]){yellow} %-120m | %clr(at %C\\(%F:%L\\)){magenta} %n"
  level:
    ar.edu.unq.desapp.comprandoencasa.aspects: DEBUG
    ar.edu.unq.desapp.comprandoencasa.controllers: INFO
    ar.edu.unq.desapp.comprandoencasa.service: INFO
  file: logFile